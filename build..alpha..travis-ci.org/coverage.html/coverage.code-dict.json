{"/home/travis/build/npmtest/node-npmtest-knox-mpu/test.js":"/* istanbul instrument in package npmtest_knox_mpu */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knox-mpu/lib.npmtest_knox_mpu.js":"/* istanbul instrument in package npmtest_knox_mpu */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_knox_mpu = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_knox_mpu = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-knox-mpu/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-knox-mpu && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_knox_mpu */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_knox_mpu\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_knox_mpu.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_knox_mpu.rollup.js'] =\n            local.assetsDict['/assets.npmtest_knox_mpu.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_knox_mpu.__dirname +\n                    '/lib.npmtest_knox_mpu.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knox-mpu/node_modules/knox-mpu/index.js":"module.exports = require('./lib/multipartupload');","/home/travis/build/npmtest/node-npmtest-knox-mpu/node_modules/knox-mpu/lib/multipartupload.js":"var _ = require('lodash'),\n    EventEmitter = require('events').EventEmitter,\n    Batch = require('batch'),\n    fs = require('fs'),\n    path = require('path'),\n    os = require('os'),\n    util = require('util'),\n    parse = require('./parse');\n\n/**\n * Initializes a Amazon S3 Multi part file upload with the given options\n */\nfunction MultiPartUpload(opts, callback) {\n    if (!opts.client || !opts.objectName) {\n        throw new Error('MultiPart upload must be created from a client and provide an object name');\n    }\n\n    if (!opts.stream && !opts.file) {\n        throw new Error('MultiPart upload must be passed either a stream or file parameter');\n    }\n\n    if (opts.stream && opts.file) {\n        throw new Error('You cannot provide both a stream and a file to upload');\n    }\n\n    if (opts.noDisk && opts.partSize && opts.partSize > 10485760) {\n        throw new Error('Keep in-memory part sizes 10MB or less');\n    }\n\n    callback = callback || function(err, results) {};\n\n    this.objectName = opts.objectName;\n    this.fileName = opts.file;\n    this.headers = opts.headers || {};\n    this.client = opts.client;\n    this.partSize = opts.partSize || 5242880; // 5MB default\n    this.maxRetries = opts.maxRetries || 0;   // default to no retry\n    this.uploadId = null;\n    this.uploads = new Batch();\n    this.noDisk = opts.noDisk;\n    this.maxUploadSize = opts.maxUploadSize || 1/0; // infinity default\n    this.currentUploadSize = 0;\n    this.aborted = false;\n    this.totalUploadSize = 0;\n\n    this.uploads.concurrency(opts.batchSize ||4); // 4 simultaneous uploads by default\n\n    // initialise the tmp directory based on opts (fallback to os.tmpDir())\n    this.tmpDir = !this.noDisk && (opts.tmpDir || os.tmpDir());\n\n    var mpu = this,\n        written = 0;\n\n    mpu.on('partProgress', function(data) {        \n        written += data.written;\n        mpu.emit('progress', {\n            written: written,\n            total: mpu.totalUploadSize,\n            percent: written / mpu.totalUploadSize * 100 | 0\n        });\n    });\n\n    // Recalculate progress as previously written data needs to be rewritten\n    mpu.on('failed', function(part, partWritten) {\n        written = written - partWritten;\n    });\n\n    if (opts.stream) {\n        this._putStream(opts.stream, callback);\n    } else {\n        this._putFile(opts.file, callback);\n    }    \n\n}\nutil.inherits(MultiPartUpload, EventEmitter);\n\n/**\n * Attempts to initiate the MultiPartUpload request (gets the upload ID)\n */\nMultiPartUpload.prototype._initiate = function(callback) {\n    // Send the initiate request\n    var req = this.client.request('POST', this.objectName + '?uploads', this.headers),\n        mpu = this;\n\n    // Handle the xml response\n    parse.xmlResponse(req, function(err, body) {\n\n        if (err) return callback(err);\n        if (!body.UploadId) return callback('Invalid upload ID');\n\n        mpu.uploadId = body.UploadId;\n        mpu.emit('initiated', body.UploadId);\n        return callback(null, body.UploadId);\n    });\n\n    req.end();\n};\n\n/**\n * Streams a file to S3 using a multipart form upload\n *\n * Divides the file into separate files, and then writes them to Amazon S3\n */\nMultiPartUpload.prototype._putFile = function(file, callback) {\n    if (!file) return callback('Invalid file');\n\n    var mpu = this,\n        parts = [];\n\n    fs.exists(file, function(exists) {\n        if (!exists) {\n            return callback('File does not exist');\n        }\n\n        fs.lstat(file, function (err, stats) {\n            var remainingBytes = stats.size;\n            var offset = 0;\n            mpu.totalUploadSize = stats.size;\n            while (remainingBytes > mpu.partSize) {\n                var partId = parts.length + 1,\n                    part = {\n                        id: partId,\n                        fileName: mpu.fileName,\n                        offset: offset,\n                        length: mpu.partSize,\n                        triesLeft: mpu.maxRetries + 1\n                    };\n                offset += mpu.partSize;\n                remainingBytes -= mpu.partSize;\n                parts.push(part);\n                mpu.uploads.push(mpu._uploadPart.bind(mpu, part));\n            }\n            if (remainingBytes) {\n                var partId = parts.length + 1,\n                    part = {\n                        id: partId,\n                        fileName: mpu.fileName,\n                        offset: offset,\n                        length: remainingBytes,\n                        triesLeft: mpu.maxRetries + 1\n                    };\n                parts.push(part);\n                mpu.uploads.push(mpu._uploadPart.bind(mpu, part));\n            }\n\n            mpu._initiate(function(err, uploadId) {\n                if (err || !uploadId) {\n                    return callback('Unable to initiate file upload');\n                }\n                return mpu._completeUploads(callback);\n            });\n        });\n   });\n}\n\n/**\n * Streams a stream to S3 using a multipart form upload.\n *\n * It will attempt to initialize the upload (if not already started), read the stream in,\n * write the stream to a temporary file of the given partSize, and then start uploading a part\n * each time a part is available\n */\nMultiPartUpload.prototype._putStream = function(stream, callback) {\n\n    if (!stream) return callback('Invalid stream');\n\n    var mpu = this;\n\n    if (!this.uploadId) {\n        this._initiate(function(err, uploadId) {\n            if (err || !uploadId) return callback('Unable to initiate stream upload [' + err || 'No upload ID' + ']');\n        });    \n    }\n    // Start handling the stream straight away\n    mpu._handleStream(stream, callback);\n};\n\n/**\n  Handles an incoming stream, divides it into parts, and uploads it to S3\n **/\nMultiPartUpload.prototype._handleStream = function(stream, callback) {\n\n    var mpu = this,\n        parts = [],\n        current;\n\n    // Create a new part\n    function newPart() {\n        var partId = parts.length + 1,\n            partFileName = path.resolve(path.join(mpu.tmpDir || '', 'mpu-' + this.objectName + '-' + random_seed() + '-' + (mpu.uploadId || Date.now()) + '-' + partId)),\n            partFile = !mpu.noDisk && fs.createWriteStream(partFileName),\n            part = {\n                id: partId,\n                stream: partFile,\n                fileName: partFileName,\n                offset: 0,\n                length: 0,\n                triesLeft: mpu.maxRetries + 1,\n                data: Buffer('')\n            };\n\n        parts.push(part);\n        return part;\n    }\n\n    function partReady(part) {\n        if (!part) return;\n\n        // Ensure the stream is closed\n        if (part.stream && part.stream.writable) {\n            part.stream.end();\n        }\n        mpu.uploads.push(mpu._uploadPart.bind(mpu, part));\n    }\n\n    function abortUpload(part) {\n        // Ensure the stream is closed and temporary file removed\n        if (part && part.stream.writable) {\n            // Ensure the stream is closed\n            if (part.stream.writable) {\n                part.stream.end();\n            }\n\n            // Remove the temporary file\n            fs.unlink(part.fileName, function(err) {\n                if(err) return callback(err);\n            });\n        }\n\n        current = null;\n        mpu.aborted = true;\n    }\n\n    // Handle the data coming in\n    stream.on('data', function(buffer) {\n        // Check if we are over the max total limit\n        if((mpu.currentUploadSize += buffer.length )> mpu.maxUploadSize){\n            return abortUpload(current);\n        }\n\n        if (!current) {\n            current = newPart();\n        }\n\n        if (current.stream) {\n            current.stream.write(buffer);\n        } else {\n            current.data = Buffer.concat([current.data, buffer]);\n        }\n        current.length += buffer.length;\n        mpu.totalUploadSize += buffer.length;\n\n        // Check if we have a part\n        if (current.length >= mpu.partSize) {\n            partReady(current);\n            current = null;\n        }\n    });\n\n    // Handle the end of the stream\n    stream.on('end', function() {\n        if (current) {\n            partReady(current);\n        }\n\n        // Wait for the completion of the uploads\n        if(mpu.aborted){\n          return mpu._abortUploads(callback);\n        }else{\n          return mpu._completeUploads(callback);\n        }\n    });\n\n    // Handle errors\n    stream.on('error', function(err) {\n        // Clean up\n        return callback(err);\n    });    \n};\n\n/**\n  Uploads a part, or if we are not ready yet, waits for the upload to be initiated\n  and will then upload\n **/\nMultiPartUpload.prototype._uploadPart = function(part, callback) {\n\n    // If we haven't started the upload yet, wait for the initialization\n    if (!this.uploadId) {\n        return this.on('initiated', this._uploadPart.bind(this, part, callback));\n    }\n\n    var url = this.objectName + '?partNumber=' + part.id + '&uploadId=' + this.uploadId,\n        headers = { 'Content-Length': part.length },\n        req = this.client.request('PUT', url, headers),\n        partStream = !this.noDisk && fs.createReadStream(part.fileName, {start: part.offset, end: part.offset + part.length - 1}),\n        mpu = this,\n        written = 0;\n\n    // Wait for the upload to complete\n    req.on('response', function(res) {\n        if (res.statusCode != 200) {\n            var result = {part: part.id, message: 'Upload failed with status code '+res.statusCode };\n            mpu.emit('failed', result);\n            if (--part.triesLeft)\n                return MultiPartUpload.prototype._uploadPart.call(mpu, part, callback);\n            else\n                return callback(result);\n        }\n        \n        // Grab the etag and return it\n        var etag = res.headers.etag,\n            result = {part: part.id, etag: etag, size: part.length};\n\n        mpu.emit('uploaded', result);\n        return callback(null, result);\n    });\n\n    // Handle errors\n    req.on('error', function(err) {\n        var result = {part: part.id, message: err};\n        mpu.emit('failed', result, written);\n        if (--part.triesLeft)\n            return MultiPartUpload.prototype._uploadPart.call(mpu, part, callback);\n        else\n            return callback(result);\n    });\n\n    if (!this.noDisk) {\n        partStream.on('data', function (data) {\n            written += data.length;\n            mpu.emit('partProgress', {\n                part: part.id,\n                written: data.length,\n                overall: written,\n                total: part.length,\n                percent: written / part.length * 100 | 0\n            });\n        });\n        partStream.pipe(req);\n    } else {\n        req.write(part.data);\n        req.end();\n    }\n\n    mpu.emit('uploading', part.id);\n};\n\n/**\n  Indicates that all uploads have been started and that we should wait for completion\n **/\nMultiPartUpload.prototype._completeUploads = function(callback) {\n\n    var mpu = this;\n\n    this.uploads.end(function(err, results) {\n\n        if (err) return callback(err);\n\n        var size = 0, parts;\n        parts = _.map(results, function(value) {\n            size += value.size;\n            return util.format('<Part><PartNumber>%d</PartNumber><ETag>%s</ETag></Part>', value.part, value.etag);\n        }).join('');\n\n        var req = mpu.client.request('POST', mpu.objectName + '?uploadId=' + mpu.uploadId);\n\n        // Register the response handler\n        parse.xmlResponse(req, function(err, body) {\n            if (err) return callback(err);\n            delete body.$;\n            body.size = size;\n            mpu.emit('completed', body);\n            return callback(null, body);\n        });\n\n        // Write the request\n        req.write('<CompleteMultipartUpload>' + parts + '</CompleteMultipartUpload>');\n        req.end();\n    });\n};\n\n/**\n  Indicates that upload has been aborted\n **/\nMultiPartUpload.prototype._abortUploads = function(callback) {\n\n    var mpu = this;\n\n    this.uploads.end(function(err, results) {\n\n        if (err) return callback(err);\n\n        var req = mpu.client.request('DELETE', mpu.objectName + '?uploadId=' + mpu.uploadId);\n\n        // Register the response handler\n        parse.xmlResponse(req, function(err, body) {\n            if (err) return callback(err);\n            return callback('reached maxUploadSize');\n        });\n\n        req.end();\n    });\n};\n\nmodule.exports = MultiPartUpload;\n\nfunction random_seed(){\n    return 'xxxx'.replace(/[xy]/g, function(c) {var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);});\n}\n","/home/travis/build/npmtest/node-npmtest-knox-mpu/node_modules/knox-mpu/lib/parse.js":"var xml2js = require('xml2js');\n\n/**\n  Simple helper method to handle XML responses\n **/\nexports.xmlResponse = function xmlResponse(req, callback) {\n    \n    if (!req) return callback('Invalid request');\n    \n    // Handle the response\n    req.on('response', function(res) {\n        var body = '';\n\n        res.on('data', function(chunk){\n            body += chunk;\n        });\n\n        res.on('end', function(){\n            var parser = new xml2js.Parser({explicitArray: false, explicitRoot: false});            \n            parser.parseString(body, callback);\n        });\n\n        res.on('error', callback);\n    });\n    \n    req.on('error', callback);    \n}"}